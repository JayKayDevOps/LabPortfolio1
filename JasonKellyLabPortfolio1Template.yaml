# Give an overall view of what the template will install
Description: 
  This template deploys a VPC, with a public and private subnet in Availability Zone us-east-1a.
  It deploys an internet gateway, with a default route on the public subnet. 
  It also deploys a default route for the private subnet.
  This private subnet will only be accesible from the Public EC2 instance 

# The Parameters added are the Environment Name and CIDR blocks
# The CIDR blocks show the IP Allocation for the VPC, Public and Private subnets
# Being in the parameters allows them to be edited in the UI at install 

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names after stack creation
    Type: String
  
  # The VPC CIDR Block provides a pool of IPs, the public and private subnets will get their IPs 
  # the VPC CIDR allocation
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 172.20.0.0/16

  PublicSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in
      the first Availability Zone
    Type: String
    Default: 172.20.1.0/24

  PrivateSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in
      the first Availability Zone
    Type: String
    Default: 172.20.2.0/24


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  PublicInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Retain
    Properties:
      GroupDescription: jason-labportfolio1-public-sg
      GroupName: jason-labportfolio1-public-sg
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
          FromPort: -1
          ToPort: -1

  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: labportfolio1-priv-sg
      GroupName: labportfolio1-priv-sg
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 172.20.1.0/24
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 172.20.1.0/24


  PublicInstance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref PublicSubnet
      AvailabilityZone: us-east-1a
      KeyName: testKey
      ImageId: ami-0866a3c8686eaeeba
      InstanceType: t2.micro
      SecurityGroupIds:
        - !GetAtt   PublicInstanceSecurityGroup.GroupId
      VpcId: !Ref VPC
      Monitoring: false
      Tags:
        - Value: jason-labportfolio1-publicBox
          Key: Name

  
  PrivateEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref PrivateSubnet
      AvailabilityZone: us-east-1a
      ImageId: ami-06b21ccaeff8cd686
      KeyName: testKey
      InstanceType: t2.micro
      SecurityGroupIds:
        - !GetAtt   ServerSecurityGroup.GroupId
      VpcId: !Ref VPC
      Monitoring: false
      Tags:
        - Value: jason-labportfolio1-priv-instance
          Key: Name

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC


  PublicSubnet:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet

  PrivateSubnet:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet
